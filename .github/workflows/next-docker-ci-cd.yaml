name: Next.js CI/CD Pipeline

on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    build-and-push:
        runs-on: ubuntu-20.04
        if: github.repository == 'PhantomOfLINUX/POL_Front'

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "20"
                  cache: "npm"

            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.npm
                      **/node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Make env file
              run: |
                  echo "${{ secrets.ENV_PROPERTIES }}" > ".env"
                  cat .env

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v3
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKERHUB_ORGNIZATIONS }}/pol-front:latest
                  cache-from: type=registry,ref=${{ secrets.DOCKERHUB_ORGNIZATIONS }}/pol-front:cache
                  cache-to: type=inline

    deploy:
        needs: build-and-push
        runs-on: ubuntu-20.04
        if: github.repository == 'PhantomOfLINUX/POL_Front'

        steps:
            - name: Deploy to Server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      docker pull ${{ secrets.DOCKERHUB_ORGNIZATIONS }}/pol-front:latest
                      docker stop pol-front || true
                      docker rm pol-front || true
                      docker run -d --name pol-front -p 3000:3000 ${{ secrets.DOCKERHUB_ORGNIZATIONS }}/pol-front:latest
